package ai.worlds.vacuum;

import java.util.Vector;
import java.util.Random;

public class HilbertAgente1VacuumAgent extends VacuumAgent {

    private Random random = new Random(); // Para introduzir alguma variação nos giros

    @Override
    public void determineAction() {
        Vector p = (Vector) percept;

        // PRIORIDADE 1: Aspirar se o local atual estiver sujo
        if (p.elementAt(1) != null && p.elementAt(1).equals("dirt")) {
            action = "suck";
            return; // Ação imediata, não precisa de mais decisões neste ciclo
        }

        // PRIORIDADE 2: Reagir a uma colisão (bateu em uma parede ou limite)
        if (p.elementAt(0) != null && p.elementAt(0).equals("bump")) {
            // Se bateu, vire. Usaremos uma aleatoriedade para evitar que ele fique preso
            // virando sempre para o mesmo lado em um canto.
            if (random.nextBoolean()) {
                action = "turn right";
            } else {
                action = "turn left";
            }
            return;
        }

        // PRIORIDADE 3: Lógica de exploração/movimento (se não há sujeira nem colisão)
        // Se não há sujeira nem batida, a ação padrão é tentar ir para frente.
        // Se ele ficar preso ou não explorar bem, podemos introduzir mais "viradas" aleatórias
        // aqui também, mesmo sem bater. Por enquanto, vamos com o mais simples.
        action = "forward";
    }
}